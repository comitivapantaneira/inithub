generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String
  department   String?
  emojiAvatar  String   @default("ðŸ‘¤")
  isAdmin      Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  initiativesAuthored   Initiative[] @relation("InitiativeAuthor")
  initiativesAssignedTo Initiative[] @relation("InitiativeAssignedTo")
  initiativesAssignedBy Initiative[] @relation("InitiativeAssignedBy")
  // removed created/updated by relations; authorId on Initiative is the creator
  likes                 Like[]
  comments              Comment[]
  updates               InitiativeUpdate[] @relation("UpdateAuthor")

  @@map("users")
}

model Initiative {
  id                  String            @id @default(cuid())
  authorId            String
  title               String
  description         String
  theme               String
  context             String
  deliverable         String
  evaluationCriteria  String
  status              InitiativeStatus  @default(PENDING)
  assignedToId        String?
  assignedById        String?
  assignedAt          DateTime?
  // Prisma does not natively manage pgvector type; handled via migration SQL
  embedding           Unsupported("vector")?
  likesCount          Int               @default(0)
  commentsCount       Int               @default(0)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  

  // Relations
  author      User              @relation("InitiativeAuthor", fields: [authorId], references: [id])
  assignedTo  User?             @relation("InitiativeAssignedTo", fields: [assignedToId], references: [id])
  assignedBy  User?             @relation("InitiativeAssignedBy", fields: [assignedById], references: [id])

  likes       Like[]
  comments    Comment[]
  updates     InitiativeUpdate[]

  @@index([authorId])
  @@index([assignedToId])
  @@map("initiatives")
}

model Like {
  id           String   @id @default(cuid())
  userId       String
  initiativeId String
  createdAt    DateTime @default(now())

  user        User        @relation(fields: [userId], references: [id])
  initiative  Initiative  @relation(fields: [initiativeId], references: [id])

  @@unique([userId, initiativeId])
  @@map("likes")
}

model Comment {
  id           String   @id @default(cuid())
  content      String
  createdAt    DateTime @default(now())
  userId       String
  initiativeId String

  user        User        @relation(fields: [userId], references: [id])
  initiative  Initiative  @relation(fields: [initiativeId], references: [id])

  @@map("comments")
}

model InitiativeUpdate {
  id            String   @id @default(cuid())
  initiativeId  String
  authorId      String
  content       String
  createdAt     DateTime @default(now())

  initiative Initiative @relation(fields: [initiativeId], references: [id])
  author     User       @relation("UpdateAuthor", fields: [authorId], references: [id])

  @@map("initiative_updates")
}

enum InitiativeStatus {
  PENDING
  APPROVED
  REJECTED
  IN_EXECUTION
  COMPLETED
}